<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新手小白入门前后端分离-持续更新</title>
    <link href="/2021/07/25/%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/07/25/%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前后端分离-前端做前端的-后端做后端的-前端用-axios-调用后端的接口进行交互"><a href="#前后端分离-前端做前端的-后端做后端的-前端用-axios-调用后端的接口进行交互" class="headerlink" title="前后端分离,前端做前端的,后端做后端的.     前端用 axios 调用后端的接口进行交互"></a>前后端分离,前端做前端的,后端做后端的.     前端用 axios 调用后端的接口进行交互</h2><p>前端的目录结构<br>build – 构建相关<br>config – 配置<br>assets – 静态资源<br>components – 全局公用组件<br>router – 路由<br>utils – 公用方法<br>APP.vue – 入口页面<br>main.js – 入口文件，加载组件和初始化<br>static – 静态资源<br><img src="https://img-blog.csdnimg.cn/20210706134306321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"># 在这个项目中,components 下直接写的 前端页面,不是公用组件;<br>router.js 是前端的 页面管理, 注意这跟后端一点关系没有,  每一个 path 就是前端能访问的页面,(用户能访问的页面)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs javascript">routes: [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;登录&#x27;</span>,<br>    <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">component</span>: Login<br>  &#125;, &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>    <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;文章管理&#x27;</span>,<br>    <span class="hljs-attr">iconCls</span>: <span class="hljs-string">&#x27;fa fa-file-text-o&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/articleList&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;文章列表&#x27;</span>,<br>        <span class="hljs-attr">component</span>: ArticleList,<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span><br>        &#125;<br>      &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/postArticle&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;发表文章&#x27;</span>,<br>        <span class="hljs-attr">component</span>: PostArticle,<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/blogDetail&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;博客详情&#x27;</span>,<br>        <span class="hljs-attr">component</span>: BlogDetail,<br>        <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;, &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/editBlog&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;编辑博客&#x27;</span>,<br>        <span class="hljs-attr">component</span>: PostArticle,<br>        <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;, <br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>        <span class="hljs-attr">iconCls</span>: <span class="hljs-string">&#x27;fa fa-user-o&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>,<br>        <span class="hljs-attr">component</span>: UserMana<br>      &#125;<br>    ]<br>  &#125;, <br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;栏目管理&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/cateMana&#x27;</span>,<br>        <span class="hljs-attr">iconCls</span>: <span class="hljs-string">&#x27;fa fa-reorder&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;栏目管理&#x27;</span>,<br>        <span class="hljs-attr">component</span>: CateMana<br>      &#125;<br>    ]<br>  &#125;, <br>]<br></code></pre></td></tr></table></figure><blockquote><p>   <a href="http://localhost:8080/#/">http://localhost:8080/#/</a>    井号后面开始的path<br>   看这个路径意思就是当访问path: ‘/‘, 根目录的时候==&gt;&gt;显示 component: Login Login页面</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;登录&#x27;</span>,<br>  <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">component</span>: Login<br>&#125;,<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210706140040496.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021070614000446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="这个页面"></p><h3 id="axios和接口封装"><a href="#axios和接口封装" class="headerlink" title="axios和接口封装:"></a>axios和接口封装:</h3><blockquote><p>在前后端交互方面采用axios，为了便于维护和复用，避免每个页面都引入一次axios和qs、避免每个接口都进行请求头配置，我们可以对axios进行封装。</p></blockquote><p>例子get方法的封装, 例子如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 封装get请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">url</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;Promise&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetch</span>(<span class="hljs-params">url, params = &#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios.get(url, &#123;<br>      <span class="hljs-attr">params</span>: params<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(response);<br>      <br>      resolve(response.data)<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>      reject(error)<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>我们解析一下项目中的代码, 项目的代码如下,同样也是把代码封装了一层<br>注意 () =&gt; {}  这是es6的箭头函数, 他就是函数跟上边的function是一样的,()括号中是这个函数的参数;<br>用axios get post 等请求.params是参数 transformRequest在向服务器发送前，修改请求数据<br>export 是把这个函数导出 ====&gt;&gt;&gt;其他地方import 引入就能直接用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getRequest = <span class="hljs-function">(<span class="hljs-params">url,params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">data</span>:params,<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> ret = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> it <span class="hljs-keyword">in</span> data) &#123;<br>        ret += <span class="hljs-built_in">encodeURIComponent</span>(it) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[it]) + <span class="hljs-string">&#x27;&amp;&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> ret<br>    &#125;],<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;base&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span><br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> deleteRequest = <span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;base&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span><br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> postRequest = <span class="hljs-function">(<span class="hljs-params">url, params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;base&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span>,<br>    <span class="hljs-attr">data</span>: params,<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-comment">// Do whatever you want to transform the data</span><br>      <span class="hljs-keyword">let</span> ret = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> it <span class="hljs-keyword">in</span> data) &#123;<br>        ret += <span class="hljs-built_in">encodeURIComponent</span>(it) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[it]) + <span class="hljs-string">&#x27;&amp;&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> ret<br>    &#125;],<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> uploadFileRequest = <span class="hljs-function">(<span class="hljs-params">url, params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;base&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span>,<br>    <span class="hljs-attr">data</span>: params,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span><br>    &#125;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> putRequest = <span class="hljs-function">(<span class="hljs-params">url, params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;put&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;base&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span>,<br>    <span class="hljs-attr">data</span>: params,<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> ret = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> it <span class="hljs-keyword">in</span> data) &#123;<br>        ret += <span class="hljs-built_in">encodeURIComponent</span>(it) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[it]) + <span class="hljs-string">&#x27;&amp;&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> ret<br>    &#125;],<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript">找到登录的页面 用户输入的账号密码都通过 v-model进行双向绑定 存到了loginForm 这里<br><span class="hljs-keyword">import</span> &#123;postRequest&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/api&#x27;</span>  通过<span class="hljs-keyword">import</span>引入封装好的方法<br>&lt;el-button type=<span class="hljs-string">&quot;primary&quot;</span> @click.native.prevent=<span class="hljs-string">&quot;submitClick&quot;</span> style=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;登录&lt;/el-button&gt;<br>这是登录的 按钮, 使用了element-ui ;  @click.native.prevent=<span class="hljs-string">&quot;submitClick&quot;</span> 绑定事件,当点击按钮的时候会触发这个方法函数.<br> <span class="hljs-string">&#x27;/login&#x27;</span>,为上方封装号的url; &#123;<span class="hljs-attr">username</span>: <span class="hljs-built_in">this</span>.loginForm.username,<span class="hljs-attr">password</span>: <span class="hljs-built_in">this</span>.loginForm.password&#125;这就是要传递的参数<br>        <br>      <span class="hljs-attr">submitClick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">true</span>;<br>        postRequest(<span class="hljs-string">&#x27;/login&#x27;</span>, &#123;<br>          <span class="hljs-attr">username</span>: <span class="hljs-built_in">this</span>.loginForm.username,<br>          <span class="hljs-attr">password</span>: <span class="hljs-built_in">this</span>.loginForm.password<br>        &#125;).then(<span class="hljs-function"><span class="hljs-params">resp</span>=&gt;</span> &#123;<br>          _this.loading = <span class="hljs-literal">false</span>;<br>          <span class="hljs-keyword">if</span> (resp.status == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-comment">//成功</span><br>            <span class="hljs-keyword">var</span> json = resp.data;<br>            <span class="hljs-keyword">if</span> (json.status == <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>              _this.$router.replace(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>&#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              _this.$alert(<span class="hljs-string">&#x27;登录失败!&#x27;</span>, <span class="hljs-string">&#x27;失败!&#x27;</span>);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//失败</span><br>            _this.$alert(<span class="hljs-string">&#x27;登录失败!&#x27;</span>, <span class="hljs-string">&#x27;失败!&#x27;</span>);<br>          &#125;<br>        &#125;, <span class="hljs-function"><span class="hljs-params">resp</span>=&gt;</span> &#123;<br>          _this.loading = <span class="hljs-literal">false</span>;<br>          _this.$alert(<span class="hljs-string">&#x27;找不到服务器⊙﹏⊙∥!&#x27;</span>, <span class="hljs-string">&#x27;失败!&#x27;</span>);<br>        &#125;);<br>      &#125;<br>      ##############<br><span class="hljs-string">&#x27;/login&#x27;</span>  是后端的接口<br>注意 在config文件夹下的index文件中 配置了服务端的信息<br>意思就是 axios中写的url <span class="hljs-string">&#x27;/login&#x27;</span> 会和<span class="hljs-string">&#x27;http://localhost:8081&#x27;</span> 拼接在一起形成完整的服务端接口地址.<br>    <span class="hljs-comment">// Paths</span><br>    <span class="hljs-attr">assetsSubDirectory</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br>    <span class="hljs-attr">assetsPublicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">proxyTable</span>: &#123;<br>      <span class="hljs-string">&#x27;/&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8081&#x27;</span>,  <span class="hljs-comment">// 本地测试</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-string">&#x27;^/&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的学习笔记</title>
    <link href="/2021/07/04/learn-git01/"/>
    <url>/2021/07/04/learn-git01/</url>
    
    <content type="html"><![CDATA[<h2 id="git的学习与使用"><a href="#git的学习与使用" class="headerlink" title="git的学习与使用"></a>git的学习与使用</h2><p>学习源,有很多===&gt;&gt;&gt;</p><p>例: 廖雪峰官方网站 ——<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都 花在了提交补丁和保存归档的繁琐事务上（1991－2002 年间）。到 2002 年， Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了， 于是整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。 到 2005 年的时候，开发 BitKeeper 的商业公司同 Linux 内核开源社区的 合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社 区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属 于自己的版本控制系统才不至于重蹈覆辙。</p><p>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时 候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后 干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是 必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网 下，如果网速慢的话，就郁闷了。</p><p><img src="http://47.100.67.62:9002/2021/07/04/c83eebf707bb7.png"></p><p>Git 是分布式版本控制系统，那么它可以没有中央服务器的，每个人的电脑 就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？ 比如说自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，你们两 之间只需把各自的修改推送给对方，就可以互相看到对方的修改了</p><p><img src="http://47.100.67.62:9002/2021/07/04/be01beffe18b1.png"></p><p><img src="http://47.100.67.62:9002/2021/07/04/b65d052e3725b.png"></p><p><img src="http://47.100.67.62:9002/2021/07/04/239c8ab06f4ba.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue的学习笔记---vue的生命周期</title>
    <link href="/2021/07/04/learn-vue01/"/>
    <url>/2021/07/04/learn-vue01/</url>
    
    <content type="html"><![CDATA[<h2 id="vue学习小记—vue的生命周期"><a href="#vue学习小记—vue的生命周期" class="headerlink" title="vue学习小记—vue的生命周期"></a>vue学习小记—vue的生命周期</h2><p>建议学习 vue ,直接阅读官方文档就好,真的很强.</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue生命周期"></p><p><strong>beforeCreate( 创建前 )</strong></p><p>el 和data都没有初始化,无妨访问methods,data,computed上的方法和数据</p><p><strong>created ( 创建后 ）</strong></p><p>实例已经创建完成之后被调用，在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，el没有。 然而，挂在阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等，通常我们可以在这里对实例进行预处理，也有一些童鞋喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成</p><p><strong>beforeMount</strong></p><p>挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上。</p><p><strong>mounted</strong></p><p>挂在完成，也就是模板中的HTML渲染到HTML页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</p><p><strong>beforeUpdate</strong></p><p>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程</p><p><strong>updated（更新后）</strong></p><p>在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</p><p><strong>beforeDestroy（销毁前）</strong></p><p>在实例销毁之前调用，实例仍然完全可用，</p><ol><li>这一步还可以用this来获取实例，</li><li>一般在这一步做一些重置的操作，比如清除掉组件中的定时器     和 监听的dom事件</li></ol><p><strong>destroyed（销毁后）</strong></p><p>在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 遇到的部署问题</title>
    <link href="/2021/07/04/hexo-bug/"/>
    <url>/2021/07/04/hexo-bug/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-遇到的部署问题"><a href="#hexo-遇到的部署问题" class="headerlink" title="hexo 遇到的部署问题"></a>hexo 遇到的部署问题</h1><p>下面是一些常用的 hexo 命令</p><ul><li>hexo   g  -d   //   生成静态文件并部署</li><li>hexo  s    //  本地运行</li><li>hexo clean  //   清理配置文件</li></ul><p><strong>出现问题的原因是  git 没有配置系统变量</strong></p><p>本来系统是有的,因为win10更新导致系统变量好多 都丢失了  也不知道为什么  node 的环境变量也没了</p><p>直接上解决方案===&gt;&gt;&gt;<br><strong>解决方案一</strong><br>    重新配置环境变量  然后就可以了<br><strong>解决方案二</strong><br>    到 hexo 的根目录下 右键 git bash  ;  在git bash  里面执行 hexo d 就能完成部署了</p>]]></content>
    
    
    <categories>
      
      <category>遇到的问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署vue +koa+nginx前后端分离项目到服务器</title>
    <link href="/2021/05/31/vue-koa/"/>
    <url>/2021/05/31/vue-koa/</url>
    
    <content type="html"><![CDATA[<h1 id="部署vue-koa-nginx前后端分离项目到服务器"><a href="#部署vue-koa-nginx前后端分离项目到服务器" class="headerlink" title="部署vue +koa+nginx前后端分离项目到服务器"></a>部署vue +koa+nginx前后端分离项目到服务器</h1><h5 id="因为遇到很多坑-百度了很多-记录一下-方便以后回看-也希望这篇文章能够帮到需要的人"><a href="#因为遇到很多坑-百度了很多-记录一下-方便以后回看-也希望这篇文章能够帮到需要的人" class="headerlink" title="因为遇到很多坑,百度了很多,记录一下,方便以后回看,也希望这篇文章能够帮到需要的人"></a>因为遇到很多坑,百度了很多,记录一下,方便以后回看,也希望这篇文章能够帮到需要的人</h5><p>先上正确部署，</p><ol><li><p>部署前先确保本地可以跑起来，在打包前对自己项目的修改=&gt;把baseurl 修改成<strong>自己的ip地                址</strong>，原来可能类似这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// axios 配置接口默认路径</span><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8888/api/&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>cd到自己的项目目录下  <code>npm run build </code> 就行打包，右侧就会出来打包后的文件夹<strong>dist</strong>，这些是自己的静态资源。前端到这里打包完成。在自己的服务器上新建个文件夹例如/www/demo，这个目录就是我们网站的根目录了。可以选择通过xshell 自带的xftp，也可以直接用宝塔面板把本地的dist文件夹上传到服务器。</p></li><li><p><strong>这里使用的是阿里云服务器，通过xhell 连接操作服务器，并且使用宝塔Linux操作面板方便安装一些环境，对新手十分友好，就像软件商店一样简单。</strong></p></li><li><p>nginx 的安装，nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。宝塔操作面板软件商店一键安装，我们只需要关心nginx的配置问题<br><img src="https://img-blog.csdnimg.cn/20210307121212315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>nginx的使用<code>cd /usr/local/nginx/sbin</code>。一些命令<code> ./nginx  启动</code>，<code>./nginx -s stop 停止</code>，<code> ./nginx  -s reload 重启</code>，当修改完配置文件记得重新启动nginx</p></li><li><p>nginx的配置，<strong>nginx.conf</strong>  。可以通过<code>vim /etc/nginx/nginx.conf</code>编辑</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">server<br>   &#123;<br>       listen 80;  <span class="hljs-comment">#监听的端口号</span><br>       server_name <span class="hljs-comment">#自己服务器的ip地址;  </span><br>       index index.html index.htm index.php;  <span class="hljs-comment">#默认页面</span><br>       root  /www/demo/dist; <span class="hljs-comment"># 自己项目的根目录，不知道的看上的打包</span><br></code></pre></td></tr></table></figure></li><li><p>部署后端项目，把本地文件夹上传至服务器，本地原来是通过node  app.js来运行一个服务部署到服务器，也就相当于在服务器上运行一个进程。注意需要端口号的开放。去阿里云的实例控制台对安全组就行管理，开放你需要的端口号。查看正在运行的端口<code>netstat -ntlp</code>常用。</p></li><li><p>使用pm2 管理后端接口，<br> 安装pm2</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install pm2 -g<br></code></pre></td></tr></table></figure><p> 开启服务pm2</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start app.js                //启动app.js应用<br></code></pre></td></tr></table></figure><p> 停止服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 stop all               //停止所有应用<br>pm2 stop [AppName]        //根据应用名停止指定应用<br>pm2 stop [ID]             //根据应用id停止指定应用<br></code></pre></td></tr></table></figure><p> 自启动 <code>pm2 startup</code></p><h5 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h5></li></ol><hr><p>因为在项目中使用了WebSocket,部署是遇见这个报错,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">WebSocket connection to <span class="hljs-string">&#x27;ws://*********&#x27;</span> failed: <span class="hljs-built_in">Error</span> <span class="hljs-keyword">in</span> connection establishment: net::ERR_CONNECTION_TIMED_OUT<br></code></pre></td></tr></table></figure><p>解决方案 :  运行下面代码关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Koa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware安装Centos7,Centos7下配置DNS服务器,配置WEB服务器,配置FTP服务器</title>
    <link href="/2021/05/30/VMware/"/>
    <url>/2021/05/30/VMware/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Centos7-VMware安装CentOS7超详细版"><a href="#安装Centos7-VMware安装CentOS7超详细版" class="headerlink" title="安装Centos7, VMware安装CentOS7超详细版"></a>安装Centos7, <a href="https://blog.csdn.net/tsundere_x/article/details/104263100">VMware安装CentOS7超详细版</a></h2><ul><li>安装系统的时候 简单点可以直接选择默认的自动分区</li><li>网络那里一定要配置,好多小伙伴总是连不上网，安装时连接上，后面都没问题</li></ul><hr><h2 id="Centos7-下配置DNS服务器"><a href="#Centos7-下配置DNS服务器" class="headerlink" title="Centos7 下配置DNS服务器"></a>Centos7 下配置DNS服务器</h2><p>centos7上安装DNS服务器可以实现域名与IP的双向解析，即通过域名可以找到主机IP，也可以通过IP找到域名。经历了多次失败,多次重装系统,简直不要太苦涩，对于重装系统的操作熟练的让人伤心。</p><ul><li><p>查看本机ip  <code>ip addr</code>  一般在ens33 ip长得类似这样 <code>192.168.202.129</code></p></li><li><p>安装bind  <code>yum install bind bind-utils -y</code></p></li><li><p>安装完成，可以查看named服务。  <code>systemctl status named</code></p></li><li><p>开始修改配置文件 <code>vim /etc/named.conf</code><img src="https://img-blog.csdnimg.cn/20210515101507936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>配置/etc/named.rfc1912.zones，增加一个正向解析与一个反向解析的配置，可以拷贝其他的zone 配置 ，下面的test.com也就是域名 改成自己想要的就可以了test.com 是例子</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -p named.localhost test.com.zone<br>cp -p named.loopback test.com.local<br></code></pre></td></tr></table></figure></li><li><p>有了两个文件，我们需要做修改，这里非常重要，因为文件格式在拷贝过程中可能会发生变化。<code>192.168.202.129</code>  129指的是ip最后的三位。下图是    <code>.zone   是域名的正向解析</code><br><img src="https://img-blog.csdnimg.cn/20210515103557564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下图是    <code>.local   是域名的反向解析</code><br><img src="https://img-blog.csdnimg.cn/20210515102618841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>配置本机DNS1，修改<code>/etc/sysconfig/network-scripts/ifcfg-en0或者/etc/sysconfig/network-scripts/ifcfg-ens33，</code><br>增加<code>DNS1=192.168.202.129</code></p></li><li><p>重启网络，启动named服务。named:<code>systemctl start named</code><br>网络：<code>service network restart</code></p></li><li><p>修改配置文件：<code>vim /etc/resolv.conf</code></p></li><li><p>进行验证 <code>nslookup www.域名    /      nslookup 192.168.202.129</code> </p><h6 id="大功告成-呼"><a href="#大功告成-呼" class="headerlink" title="大功告成  呼~~~"></a>大功告成  呼~~~</h6></li></ul><hr><h2 id="Centos7下配置WEB服务器"><a href="#Centos7下配置WEB服务器" class="headerlink" title="Centos7下配置WEB服务器"></a>Centos7下配置WEB服务器</h2><p> Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以处理浏览器等Web客户端的请求并返回相应响应，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS</p><ul><li><p>安装Apache服务  <code>yum install -y httpd</code></p></li><li><p>启动Apache服务  <code>ystemctl start httpd.service </code></p></li><li><p>切换目录 <code>cd /var/www</code></p></li><li><p>新建目录 <code>mkdir web</code></p></li><li><p>新建index.html    <code>echo &quot;this is web&quot; &gt; web/index.html</code></p></li><li><p> 修改配置文件 <code>在/etc/httpd/conf/httpd.conf</code><img src="https://img-blog.csdnimg.cn/20210515104831208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p> 打开自己 浏览器进行测试<img src="https://img-blog.csdnimg.cn/20210515105335176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="大功告成-呼-1"><a href="#大功告成-呼-1" class="headerlink" title="大功告成 呼~~~"></a>大功告成 呼~~~</h6></li></ul><hr><h2 id="Centos7下配置FTP服务器"><a href="#Centos7下配置FTP服务器" class="headerlink" title="Centos7下配置FTP服务器"></a>Centos7下配置FTP服务器</h2><p>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。 FTP是File Transfer Protocol(文件传输协议)。顾名思义，就是专门用来传输文件的协议。简单地说，支持FTP协议的服务器就是FTP服务器</p><ul><li>安装vsftpd  <code>yum -y install vsftpd</code></li><li>按照下面修改配置文件  <code>vim vsftpd.conf</code></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#是否允许匿名，默认no</span><br><span class="hljs-attribute">anonymous_enable</span>=<span class="hljs-literal">NO</span><br><br><span class="hljs-comment">#这个设定值必须要为YES 时，在/etc/passwd内的账号才能以实体用户的方式登入我们的vsftpd主机</span><br><span class="hljs-attribute">local_enable</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#具有写权限</span><br><span class="hljs-attribute">write_enable</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#本地用户创建文件或目录的掩码</span><br><span class="hljs-attribute">local_umask</span>=022<br><br><span class="hljs-comment">#当dirmessage_enable=YES时，可以设定这个项目来让vsftpd寻找该档案来显示讯息！您也可以设定其它档名！</span><br><span class="hljs-attribute">dirmessage_enable</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#当设定为YES时，使用者上传与下载日志都会被纪录起来。记录日志与下一个xferlog_file设定选项有关：</span><br><span class="hljs-attribute">xferlog_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">xferlog_std_format</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#上传与下载日志存放路径</span><br><span class="hljs-attribute">xferlog_file</span>=/var/log/xferlog<br><br><span class="hljs-comment">#开启20端口</span><br><span class="hljs-attribute">connect_from_port_20</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#关于系统安全的设定值：</span><br><span class="hljs-attribute">ascii_download_enable</span>=<span class="hljs-literal">YES</span>(NO)<br>如果设定为<span class="hljs-literal">YES</span> ，那么<span class="hljs-built_in"> client </span>就可以使用 ASCII 格式下载档案。<br>一般来说，由于启动了这个设定项目可能会导致DoS 的攻击，因此预设是<span class="hljs-literal">NO</span>。<br><span class="hljs-attribute">ascii_upload_enable</span>=<span class="hljs-literal">YES</span>(NO)<br>与上一个设定类似的，只是这个设定针对上传而言！预设是<span class="hljs-literal">NO</span>。<br><span class="hljs-attribute">ascii_upload_enable</span>=<span class="hljs-literal">NO</span><br><span class="hljs-attribute">ascii_download_enable</span>=<span class="hljs-literal">NO</span><br><br><span class="hljs-comment">#通过搭配能实现以下几种效果：</span><br>①当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span>，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。<br>②当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span>，chroot_local_user=NO时，<br>在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。<br>③当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">NO</span>，<br><span class="hljs-attribute">chroot_local_user</span>=<span class="hljs-literal">YES</span>时，所有的用户均不能切换到其他目录。<br>④当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">NO</span>，<br><span class="hljs-attribute">chroot_local_user</span>=<span class="hljs-literal">NO</span>时，所有的用户均可以切换到其他目录。<br><br><span class="hljs-attribute">chroot_local_user</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">chroot_list_file</span>=/etc/vsftpd/chroot_list<br><br><span class="hljs-comment">#这个是pam模块的名称，我们放置在/etc/pam.d/vsftpd</span><br><span class="hljs-attribute">pam_service_name</span>=vsftpd<br><br><span class="hljs-comment">#当然我们都习惯支持TCP Wrappers的啦！</span><br><span class="hljs-attribute">tcp_wrappers</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#不添加下面这个会报错：500 OOPS: vsftpd: refusing to run with writable root inside chroot()</span><br><span class="hljs-attribute">allow_writeable_chroot</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#ftp的端口号</span><br><span class="hljs-attribute">listen_port</span>=60021<br><span class="hljs-comment">#启动被动式联机(passivemode)</span><br><span class="hljs-attribute">pasv_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-comment">#上面两个是与passive mode 使用的 port number 有关，如果您想要使用65400 到65410 这 11 个 port 来进行被动式资料的连接，可以这样设定</span><br><span class="hljs-attribute">pasv_min_port</span>=65400<br><span class="hljs-attribute">pasv_max_port</span>=65410<br><br><span class="hljs-comment">#FTP访问目录</span><br><span class="hljs-attribute">local_root</span>=/data/ftp/<br></code></pre></td></tr></table></figure><ul><li>启动暂停查看服务状态命令 </li><li><code>启动systemctl start vsftpd.service</code>  </li><li><code>暂停 systemctl status vsftpd.service</code></li><li>创建FTP用户<br> 添加FTP用户命令：useradd XXX<br>  设置FTP用户密码：passwd XXX</li></ul><h6 id="完结-呼"><a href="#完结-呼" class="headerlink" title="完结 呼~~~"></a>完结 呼~~~</h6><hr>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos7</tag>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
