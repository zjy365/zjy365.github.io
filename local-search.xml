<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>部署vue +koa+nginx前后端分离项目到服务器</title>
    <link href="/2021/05/31/vue-koa/"/>
    <url>/2021/05/31/vue-koa/</url>
    
    <content type="html"><![CDATA[<h1 id="部署vue-koa-nginx前后端分离项目到服务器"><a href="#部署vue-koa-nginx前后端分离项目到服务器" class="headerlink" title="部署vue +koa+nginx前后端分离项目到服务器"></a>部署vue +koa+nginx前后端分离项目到服务器</h1><h5 id="因为遇到很多坑-百度了很多-记录一下-方便以后回看-也希望这篇文章能够帮到需要的人"><a href="#因为遇到很多坑-百度了很多-记录一下-方便以后回看-也希望这篇文章能够帮到需要的人" class="headerlink" title="因为遇到很多坑,百度了很多,记录一下,方便以后回看,也希望这篇文章能够帮到需要的人"></a>因为遇到很多坑,百度了很多,记录一下,方便以后回看,也希望这篇文章能够帮到需要的人</h5><p>先上正确部署，</p><ol><li><p>部署前先确保本地可以跑起来，在打包前对自己项目的修改=&gt;把baseurl 修改成<strong>自己的ip地                址</strong>，原来可能类似这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// axios 配置接口默认路径</span><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8888/api/&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>cd到自己的项目目录下  <code>npm run build </code> 就行打包，右侧就会出来打包后的文件夹<strong>dist</strong>，这些是自己的静态资源。前端到这里打包完成。在自己的服务器上新建个文件夹例如/www/demo，这个目录就是我们网站的根目录了。可以选择通过xshell 自带的xftp，也可以直接用宝塔面板把本地的dist文件夹上传到服务器。</p></li><li><p><strong>这里使用的是阿里云服务器，通过xhell 连接操作服务器，并且使用宝塔Linux操作面板方便安装一些环境，对新手十分友好，就像软件商店一样简单。</strong></p></li><li><p>nginx 的安装，nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。宝塔操作面板软件商店一键安装，我们只需要关心nginx的配置问题<br><img src="https://img-blog.csdnimg.cn/20210307121212315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>nginx的使用<code>cd /usr/local/nginx/sbin</code>。一些命令<code> ./nginx  启动</code>，<code>./nginx -s stop 停止</code>，<code> ./nginx  -s reload 重启</code>，当修改完配置文件记得重新启动nginx</p></li><li><p>nginx的配置，<strong>nginx.conf</strong>  。可以通过<code>vim /etc/nginx/nginx.conf</code>编辑</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">server<br>   &#123;<br>       listen 80;  <span class="hljs-comment">#监听的端口号</span><br>       server_name <span class="hljs-comment">#自己服务器的ip地址;  </span><br>       index index.html index.htm index.php;  <span class="hljs-comment">#默认页面</span><br>       root  /www/demo/dist; <span class="hljs-comment"># 自己项目的根目录，不知道的看上的打包</span><br></code></pre></td></tr></table></figure></li><li><p>部署后端项目，把本地文件夹上传至服务器，本地原来是通过node  app.js来运行一个服务部署到服务器，也就相当于在服务器上运行一个进程。注意需要端口号的开放。去阿里云的实例控制台对安全组就行管理，开放你需要的端口号。查看正在运行的端口<code>netstat -ntlp</code>常用。</p></li><li><p>使用pm2 管理后端接口，<br> 安装pm2</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install pm2 -g<br></code></pre></td></tr></table></figure><p> 开启服务pm2</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start app.js                //启动app.js应用<br></code></pre></td></tr></table></figure><p> 停止服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 stop all               //停止所有应用<br>pm2 stop [AppName]        //根据应用名停止指定应用<br>pm2 stop [ID]             //根据应用id停止指定应用<br></code></pre></td></tr></table></figure><p> 自启动 <code>pm2 startup</code></p><h5 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h5></li></ol><hr><p>因为在项目中使用了WebSocket,部署是遇见这个报错,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">WebSocket connection to <span class="hljs-string">&#x27;ws://*********&#x27;</span> failed: <span class="hljs-built_in">Error</span> <span class="hljs-keyword">in</span> connection establishment: net::ERR_CONNECTION_TIMED_OUT<br></code></pre></td></tr></table></figure><p>解决方案 :  运行下面代码关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VMware安装Centos7,Centos7下配置DNS服务器,配置WEB服务器,配置FTP服务器</title>
    <link href="/2021/05/30/VMware/"/>
    <url>/2021/05/30/VMware/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Centos7-VMware安装CentOS7超详细版"><a href="#安装Centos7-VMware安装CentOS7超详细版" class="headerlink" title="安装Centos7, VMware安装CentOS7超详细版"></a>安装Centos7, <a href="https://blog.csdn.net/tsundere_x/article/details/104263100">VMware安装CentOS7超详细版</a></h2><ul><li>安装系统的时候 简单点可以直接选择默认的自动分区</li><li>网络那里一定要配置,好多小伙伴总是连不上网，安装时连接上，后面都没问题</li></ul><hr><h2 id="Centos7-下配置DNS服务器"><a href="#Centos7-下配置DNS服务器" class="headerlink" title="Centos7 下配置DNS服务器"></a>Centos7 下配置DNS服务器</h2><p>centos7上安装DNS服务器可以实现域名与IP的双向解析，即通过域名可以找到主机IP，也可以通过IP找到域名。经历了多次失败,多次重装系统,简直不要太苦涩，对于重装系统的操作熟练的让人伤心。</p><ul><li><p>查看本机ip  <code>ip addr</code>  一般在ens33 ip长得类似这样 <code>192.168.202.129</code></p></li><li><p>安装bind  <code>yum install bind bind-utils -y</code></p></li><li><p>安装完成，可以查看named服务。  <code>systemctl status named</code></p></li><li><p>开始修改配置文件 <code>vim /etc/named.conf</code><img src="https://img-blog.csdnimg.cn/20210515101507936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>配置/etc/named.rfc1912.zones，增加一个正向解析与一个反向解析的配置，可以拷贝其他的zone 配置 ，下面的test.com也就是域名 改成自己想要的就可以了test.com 是例子</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -p named.localhost test.com.zone<br>cp -p named.loopback test.com.local<br></code></pre></td></tr></table></figure></li><li><p>有了两个文件，我们需要做修改，这里非常重要，因为文件格式在拷贝过程中可能会发生变化。<code>192.168.202.129</code>  129指的是ip最后的三位。下图是    <code>.zone   是域名的正向解析</code><br><img src="https://img-blog.csdnimg.cn/20210515103557564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下图是    <code>.local   是域名的反向解析</code><br><img src="https://img-blog.csdnimg.cn/20210515102618841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>配置本机DNS1，修改<code>/etc/sysconfig/network-scripts/ifcfg-en0或者/etc/sysconfig/network-scripts/ifcfg-ens33，</code><br>增加<code>DNS1=192.168.202.129</code></p></li><li><p>重启网络，启动named服务。named:<code>systemctl start named</code><br>网络：<code>service network restart</code></p></li><li><p>修改配置文件：<code>vim /etc/resolv.conf</code></p></li><li><p>进行验证 <code>nslookup www.域名    /      nslookup 192.168.202.129</code> </p><h6 id="大功告成-呼"><a href="#大功告成-呼" class="headerlink" title="大功告成  呼~~~"></a>大功告成  呼~~~</h6></li></ul><hr><h2 id="Centos7下配置WEB服务器"><a href="#Centos7下配置WEB服务器" class="headerlink" title="Centos7下配置WEB服务器"></a>Centos7下配置WEB服务器</h2><p> Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以处理浏览器等Web客户端的请求并返回相应响应，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS</p><ul><li><p>安装Apache服务  <code>yum install -y httpd</code></p></li><li><p>启动Apache服务  <code>ystemctl start httpd.service </code></p></li><li><p>切换目录 <code>cd /var/www</code></p></li><li><p>新建目录 <code>mkdir web</code></p></li><li><p>新建index.html    <code>echo &quot;this is web&quot; &gt; web/index.html</code></p></li><li><p> 修改配置文件 <code>在/etc/httpd/conf/httpd.conf</code><img src="https://img-blog.csdnimg.cn/20210515104831208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p> 打开自己 浏览器进行测试<img src="https://img-blog.csdnimg.cn/20210515105335176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlaWNoZW55dW1v,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="大功告成-呼-1"><a href="#大功告成-呼-1" class="headerlink" title="大功告成 呼~~~"></a>大功告成 呼~~~</h6></li></ul><hr><h2 id="Centos7下配置FTP服务器"><a href="#Centos7下配置FTP服务器" class="headerlink" title="Centos7下配置FTP服务器"></a>Centos7下配置FTP服务器</h2><p>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。 FTP是File Transfer Protocol(文件传输协议)。顾名思义，就是专门用来传输文件的协议。简单地说，支持FTP协议的服务器就是FTP服务器</p><ul><li>安装vsftpd  <code>yum -y install vsftpd</code></li><li>按照下面修改配置文件  <code>vim vsftpd.conf</code></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#是否允许匿名，默认no</span><br><span class="hljs-attribute">anonymous_enable</span>=<span class="hljs-literal">NO</span><br><br><span class="hljs-comment">#这个设定值必须要为YES 时，在/etc/passwd内的账号才能以实体用户的方式登入我们的vsftpd主机</span><br><span class="hljs-attribute">local_enable</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#具有写权限</span><br><span class="hljs-attribute">write_enable</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#本地用户创建文件或目录的掩码</span><br><span class="hljs-attribute">local_umask</span>=022<br><br><span class="hljs-comment">#当dirmessage_enable=YES时，可以设定这个项目来让vsftpd寻找该档案来显示讯息！您也可以设定其它档名！</span><br><span class="hljs-attribute">dirmessage_enable</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#当设定为YES时，使用者上传与下载日志都会被纪录起来。记录日志与下一个xferlog_file设定选项有关：</span><br><span class="hljs-attribute">xferlog_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">xferlog_std_format</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#上传与下载日志存放路径</span><br><span class="hljs-attribute">xferlog_file</span>=/var/log/xferlog<br><br><span class="hljs-comment">#开启20端口</span><br><span class="hljs-attribute">connect_from_port_20</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#关于系统安全的设定值：</span><br><span class="hljs-attribute">ascii_download_enable</span>=<span class="hljs-literal">YES</span>(NO)<br>如果设定为<span class="hljs-literal">YES</span> ，那么<span class="hljs-built_in"> client </span>就可以使用 ASCII 格式下载档案。<br>一般来说，由于启动了这个设定项目可能会导致DoS 的攻击，因此预设是<span class="hljs-literal">NO</span>。<br><span class="hljs-attribute">ascii_upload_enable</span>=<span class="hljs-literal">YES</span>(NO)<br>与上一个设定类似的，只是这个设定针对上传而言！预设是<span class="hljs-literal">NO</span>。<br><span class="hljs-attribute">ascii_upload_enable</span>=<span class="hljs-literal">NO</span><br><span class="hljs-attribute">ascii_download_enable</span>=<span class="hljs-literal">NO</span><br><br><span class="hljs-comment">#通过搭配能实现以下几种效果：</span><br>①当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span>，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。<br>②当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span>，chroot_local_user=NO时，<br>在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。<br>③当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">NO</span>，<br><span class="hljs-attribute">chroot_local_user</span>=<span class="hljs-literal">YES</span>时，所有的用户均不能切换到其他目录。<br>④当<span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">NO</span>，<br><span class="hljs-attribute">chroot_local_user</span>=<span class="hljs-literal">NO</span>时，所有的用户均可以切换到其他目录。<br><br><span class="hljs-attribute">chroot_local_user</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">chroot_list_file</span>=/etc/vsftpd/chroot_list<br><br><span class="hljs-comment">#这个是pam模块的名称，我们放置在/etc/pam.d/vsftpd</span><br><span class="hljs-attribute">pam_service_name</span>=vsftpd<br><br><span class="hljs-comment">#当然我们都习惯支持TCP Wrappers的啦！</span><br><span class="hljs-attribute">tcp_wrappers</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#不添加下面这个会报错：500 OOPS: vsftpd: refusing to run with writable root inside chroot()</span><br><span class="hljs-attribute">allow_writeable_chroot</span>=<span class="hljs-literal">YES</span><br><br><span class="hljs-comment">#ftp的端口号</span><br><span class="hljs-attribute">listen_port</span>=60021<br><span class="hljs-comment">#启动被动式联机(passivemode)</span><br><span class="hljs-attribute">pasv_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-comment">#上面两个是与passive mode 使用的 port number 有关，如果您想要使用65400 到65410 这 11 个 port 来进行被动式资料的连接，可以这样设定</span><br><span class="hljs-attribute">pasv_min_port</span>=65400<br><span class="hljs-attribute">pasv_max_port</span>=65410<br><br><span class="hljs-comment">#FTP访问目录</span><br><span class="hljs-attribute">local_root</span>=/data/ftp/<br></code></pre></td></tr></table></figure><ul><li>启动暂停查看服务状态命令 </li><li><code>启动systemctl start vsftpd.service</code>  </li><li><code>暂停 systemctl status vsftpd.service</code></li><li>创建FTP用户<br> 添加FTP用户命令：useradd XXX<br>  设置FTP用户密码：passwd XXX</li></ul><h6 id="完结-呼"><a href="#完结-呼" class="headerlink" title="完结 呼~~~"></a>完结 呼~~~</h6><hr>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
